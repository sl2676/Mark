function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useEffect, useState } from 'react';
import { Platform, StyleSheet, Text, TextInput, View } from 'react-native';
import { parsePhoneNumberWithError } from 'libphonenumber-js';
import { getEmojiFlag } from 'countries-list';
const INTL_SYMBOL = '+';
let resolveFlagTimeoutId;
export default function IntlPhoneField(_ref) {
  let {
    flagUndetermined = '❓',
    onEndEditing,
    onValidation,
    onValueUpdate,
    defaultCountry,
    defaultPrefix,
    defaultValue,
    defaultFlag,
    containerStyle,
    flagContainerStyle,
    flagTextStyle,
    textInputStyle,
    textInputProps
  } = _ref;
  const [flag, setFlag] = useState(defaultFlag !== null && defaultFlag !== void 0 ? defaultFlag : flagUndetermined);
  const [value, setValue] = useState(defaultValue ? defaultValue : defaultPrefix !== null && defaultPrefix !== void 0 ? defaultPrefix : '');
  const [formatted, setFormatted] = useState(defaultFlag !== null && defaultFlag !== void 0 ? defaultFlag : '');
  const [parsedNumber, setParsedNumber] = useState(null);
  const [isValid, setIsValid] = useState(false);
  const [countryCode, setCountryCode] = useState();

  const onChangeText = text => {
    setValue(`${INTL_SYMBOL}${text.split(INTL_SYMBOL).join('')}`);
  };

  useEffect(() => {
    try {
      setParsedNumber(parsePhoneNumberWithError(value, defaultCountry));
    } catch (e) {
      setParsedNumber(null);
    }
  }, [value, defaultCountry]);
  useEffect(() => {
    if (parsedNumber !== null && parsedNumber !== void 0 && parsedNumber.isValid()) {
      setIsValid(true);
    } else {
      setIsValid(false);
    }
  }, [parsedNumber]);
  useEffect(() => {
    if (isValid) {
      setCountryCode(parsedNumber === null || parsedNumber === void 0 ? void 0 : parsedNumber.country);
    } else {
      setCountryCode(undefined);
    }
  }, [parsedNumber, isValid]);
  useEffect(() => {
    if (resolveFlagTimeoutId) {
      clearTimeout(resolveFlagTimeoutId);
    }

    resolveFlagTimeoutId = setTimeout(() => {
      if (countryCode) {
        setFlag(getEmojiFlag(countryCode));
      } else if (value === defaultPrefix && defaultFlag) {
        setFlag(defaultFlag);
      } else {
        setFlag(flagUndetermined);
      }
    }, 150);
    return () => clearTimeout(resolveFlagTimeoutId);
  }, [countryCode, flagUndetermined, defaultFlag, value, defaultPrefix]);
  useEffect(() => {
    if (isValid) {
      var _parsedNumber$formatI;

      setFormatted((_parsedNumber$formatI = parsedNumber === null || parsedNumber === void 0 ? void 0 : parsedNumber.formatInternational()) !== null && _parsedNumber$formatI !== void 0 ? _parsedNumber$formatI : value);
    } else {
      setFormatted(value);
    }
  }, [isValid, parsedNumber, value]);
  useEffect(() => {
    onValidation && onValidation(isValid);
  }, [onValidation, isValid]);
  useEffect(() => {
    onValueUpdate && onValueUpdate(value);
  }, [value]);
  return /*#__PURE__*/React.createElement(View, {
    style: [styles.container, containerStyle]
  }, /*#__PURE__*/React.createElement(View, {
    style: [styles.flag, flagContainerStyle]
  }, /*#__PURE__*/React.createElement(Text, {
    style: [styles.flagText, flagTextStyle]
  }, flag)), /*#__PURE__*/React.createElement(TextInput, _extends({
    value: formatted,
    onChangeText: onChangeText,
    style: [styles.input, textInputStyle],
    keyboardType: "phone-pad",
    onEndEditing: () => {
      if (onEndEditing && Platform.OS !== 'web') {
        onEndEditing({
          isValid,
          countryCode,
          value,
          formatted,
          flag
        });
      }
    },
    onBlur: () => {
      if (onEndEditing && Platform.OS === 'web') {
        onEndEditing({
          isValid,
          countryCode,
          value,
          formatted,
          flag
        });
      }
    },
    returnKeyType: "done"
  }, textInputProps)));
}
const styles = StyleSheet.create({
  container: {
    flexDirection: 'row',
    alignItems: 'center',
    borderBottomWidth: 1
  },
  input: {
    flex: 1,
    flexGrow: 1,
    flexShrink: 1,
    paddingVertical: 10
  },
  flag: {
    marginRight: 5
  },
  flagText: {
    fontSize: 24
  }
});
//# sourceMappingURL=index.js.map