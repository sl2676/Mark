"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = IntlPhoneField;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _libphonenumberJs = require("libphonenumber-js");

var _countriesList = require("countries-list");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const INTL_SYMBOL = '+';
let resolveFlagTimeoutId;

function IntlPhoneField(_ref) {
  let {
    flagUndetermined = '❓',
    onEndEditing,
    onValidation,
    onValueUpdate,
    defaultCountry,
    defaultPrefix,
    defaultValue,
    defaultFlag,
    containerStyle,
    flagContainerStyle,
    flagTextStyle,
    textInputStyle,
    textInputProps
  } = _ref;
  const [flag, setFlag] = (0, _react.useState)(defaultFlag !== null && defaultFlag !== void 0 ? defaultFlag : flagUndetermined);
  const [value, setValue] = (0, _react.useState)(defaultValue ? defaultValue : defaultPrefix !== null && defaultPrefix !== void 0 ? defaultPrefix : '');
  const [formatted, setFormatted] = (0, _react.useState)(defaultFlag !== null && defaultFlag !== void 0 ? defaultFlag : '');
  const [parsedNumber, setParsedNumber] = (0, _react.useState)(null);
  const [isValid, setIsValid] = (0, _react.useState)(false);
  const [countryCode, setCountryCode] = (0, _react.useState)();

  const onChangeText = text => {
    setValue(`${INTL_SYMBOL}${text.split(INTL_SYMBOL).join('')}`);
  };

  (0, _react.useEffect)(() => {
    try {
      setParsedNumber((0, _libphonenumberJs.parsePhoneNumberWithError)(value, defaultCountry));
    } catch (e) {
      setParsedNumber(null);
    }
  }, [value, defaultCountry]);
  (0, _react.useEffect)(() => {
    if (parsedNumber !== null && parsedNumber !== void 0 && parsedNumber.isValid()) {
      setIsValid(true);
    } else {
      setIsValid(false);
    }
  }, [parsedNumber]);
  (0, _react.useEffect)(() => {
    if (isValid) {
      setCountryCode(parsedNumber === null || parsedNumber === void 0 ? void 0 : parsedNumber.country);
    } else {
      setCountryCode(undefined);
    }
  }, [parsedNumber, isValid]);
  (0, _react.useEffect)(() => {
    if (resolveFlagTimeoutId) {
      clearTimeout(resolveFlagTimeoutId);
    }

    resolveFlagTimeoutId = setTimeout(() => {
      if (countryCode) {
        setFlag((0, _countriesList.getEmojiFlag)(countryCode));
      } else if (value === defaultPrefix && defaultFlag) {
        setFlag(defaultFlag);
      } else {
        setFlag(flagUndetermined);
      }
    }, 150);
    return () => clearTimeout(resolveFlagTimeoutId);
  }, [countryCode, flagUndetermined, defaultFlag, value, defaultPrefix]);
  (0, _react.useEffect)(() => {
    if (isValid) {
      var _parsedNumber$formatI;

      setFormatted((_parsedNumber$formatI = parsedNumber === null || parsedNumber === void 0 ? void 0 : parsedNumber.formatInternational()) !== null && _parsedNumber$formatI !== void 0 ? _parsedNumber$formatI : value);
    } else {
      setFormatted(value);
    }
  }, [isValid, parsedNumber, value]);
  (0, _react.useEffect)(() => {
    onValidation && onValidation(isValid);
  }, [onValidation, isValid]);
  (0, _react.useEffect)(() => {
    onValueUpdate && onValueUpdate(value);
  }, [value]);
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.container, containerStyle]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.flag, flagContainerStyle]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: [styles.flagText, flagTextStyle]
  }, flag)), /*#__PURE__*/_react.default.createElement(_reactNative.TextInput, _extends({
    value: formatted,
    onChangeText: onChangeText,
    style: [styles.input, textInputStyle],
    keyboardType: "phone-pad",
    onEndEditing: () => {
      if (onEndEditing && _reactNative.Platform.OS !== 'web') {
        onEndEditing({
          isValid,
          countryCode,
          value,
          formatted,
          flag
        });
      }
    },
    onBlur: () => {
      if (onEndEditing && _reactNative.Platform.OS === 'web') {
        onEndEditing({
          isValid,
          countryCode,
          value,
          formatted,
          flag
        });
      }
    },
    returnKeyType: "done"
  }, textInputProps)));
}

const styles = _reactNative.StyleSheet.create({
  container: {
    flexDirection: 'row',
    alignItems: 'center',
    borderBottomWidth: 1
  },
  input: {
    flex: 1,
    flexGrow: 1,
    flexShrink: 1,
    paddingVertical: 10
  },
  flag: {
    marginRight: 5
  },
  flagText: {
    fontSize: 24
  }
});
//# sourceMappingURL=index.js.map