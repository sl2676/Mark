{"version":3,"sources":["index.tsx"],"names":["INTL_SYMBOL","resolveFlagTimeoutId","IntlPhoneField","flagUndetermined","onEndEditing","onValidation","onValueUpdate","defaultCountry","defaultPrefix","defaultValue","defaultFlag","containerStyle","flagContainerStyle","flagTextStyle","textInputStyle","textInputProps","flag","setFlag","value","setValue","formatted","setFormatted","parsedNumber","setParsedNumber","isValid","setIsValid","countryCode","setCountryCode","onChangeText","text","split","join","e","country","undefined","clearTimeout","setTimeout","formatInternational","styles","container","flagText","input","Platform","OS","StyleSheet","create","flexDirection","alignItems","borderBottomWidth","flex","flexGrow","flexShrink","paddingVertical","marginRight","fontSize"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Platform, StyleSheet, Text, TextInput, View } from 'react-native';\nimport {\n  CountryCode,\n  parsePhoneNumberWithError,\n  PhoneNumber,\n} from 'libphonenumber-js';\nimport { getEmojiFlag } from 'countries-list';\n\nconst INTL_SYMBOL = '+';\n\nexport type IntlPhoneFieldProps = {\n  flagUndetermined?: string;\n  defaultCountry?: CountryCode;\n  defaultPrefix?: string;\n  defaultValue?: string;\n  defaultFlag?: string;\n  onEndEditing?: Function;\n  onValidation?: Function;\n  onValueUpdate?: Function;\n  containerStyle?: object;\n  flagContainerStyle?: object;\n  flagTextStyle?: object;\n  textInputStyle?: object;\n  textInputProps?: object;\n};\n\nlet resolveFlagTimeoutId: NodeJS.Timeout;\n\nexport default function IntlPhoneField({\n  flagUndetermined = '‚ùì',\n  onEndEditing,\n  onValidation,\n  onValueUpdate,\n  defaultCountry,\n  defaultPrefix,\n  defaultValue,\n  defaultFlag,\n  containerStyle,\n  flagContainerStyle,\n  flagTextStyle,\n  textInputStyle,\n  textInputProps,\n}: IntlPhoneFieldProps) {\n  const [flag, setFlag] = useState<string>(defaultFlag ?? flagUndetermined);\n\n  const [value, setValue] = useState<string>(\n    defaultValue ? defaultValue : defaultPrefix ?? ''\n  );\n  const [formatted, setFormatted] = useState<string>(defaultFlag ?? '');\n\n  const [parsedNumber, setParsedNumber] = useState<PhoneNumber | null>(null);\n  const [isValid, setIsValid] = useState<boolean>(false);\n  const [countryCode, setCountryCode] = useState<CountryCode | undefined>();\n\n  const onChangeText = (text: string) => {\n    setValue(`${INTL_SYMBOL}${text.split(INTL_SYMBOL).join('')}`);\n  };\n\n  useEffect(() => {\n    try {\n      setParsedNumber(parsePhoneNumberWithError(value, defaultCountry));\n    } catch (e) {\n      setParsedNumber(null);\n    }\n  }, [value, defaultCountry]);\n\n  useEffect(() => {\n    if (parsedNumber?.isValid()) {\n      setIsValid(true);\n    } else {\n      setIsValid(false);\n    }\n  }, [parsedNumber]);\n\n  useEffect(() => {\n    if (isValid) {\n      setCountryCode(parsedNumber?.country);\n    } else {\n      setCountryCode(undefined);\n    }\n  }, [parsedNumber, isValid]);\n\n  useEffect(() => {\n    if (resolveFlagTimeoutId) {\n      clearTimeout(resolveFlagTimeoutId);\n    }\n    resolveFlagTimeoutId = setTimeout(() => {\n      if (countryCode) {\n        setFlag(getEmojiFlag(countryCode));\n      } else if (value === defaultPrefix && defaultFlag) {\n        setFlag(defaultFlag);\n      } else {\n        setFlag(flagUndetermined);\n      }\n    }, 150);\n\n    return () => clearTimeout(resolveFlagTimeoutId);\n  }, [countryCode, flagUndetermined, defaultFlag, value, defaultPrefix]);\n\n  useEffect(() => {\n    if (isValid) {\n      setFormatted(parsedNumber?.formatInternational() ?? value);\n    } else {\n      setFormatted(value);\n    }\n  }, [isValid, parsedNumber, value]);\n\n  useEffect(() => {\n    onValidation && onValidation(isValid);\n  }, [onValidation, isValid]);\n\n  useEffect(() => {\n    onValueUpdate && onValueUpdate(value);\n  }, [value]);\n\n  return (\n    <View style={[styles.container, containerStyle]}>\n      <View style={[styles.flag, flagContainerStyle]}>\n        <Text style={[styles.flagText, flagTextStyle]}>{flag}</Text>\n      </View>\n      <TextInput\n        value={formatted}\n        onChangeText={onChangeText}\n        style={[styles.input, textInputStyle]}\n        keyboardType=\"phone-pad\"\n        onEndEditing={() => {\n          if (onEndEditing && Platform.OS !== 'web') {\n            onEndEditing({ isValid, countryCode, value, formatted, flag });\n          }\n        }}\n        onBlur={() => {\n          if (onEndEditing && Platform.OS === 'web') {\n            onEndEditing({ isValid, countryCode, value, formatted, flag });\n          }\n        }}\n        returnKeyType=\"done\"\n        {...textInputProps}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    borderBottomWidth: 1,\n  },\n  input: {\n    flex: 1,\n    flexGrow: 1,\n    flexShrink: 1,\n    paddingVertical: 10,\n  },\n  flag: {\n    marginRight: 5,\n  },\n  flagText: {\n    fontSize: 24,\n  },\n});\n"]}